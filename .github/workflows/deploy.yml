name: starlight BE 배포

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest # 작업이 실행될 환경
    steps:
      - name: 체크아웃
        uses: actions/checkout@v3

      - name: application-private.properties 덮어쓰기
        run: |
          echo ${{ secrets.PROPERTIES }}| base64 --decode > ./src/main/resources/application-private.properties
          ls -lh ./src/main/resources/application-private.properties
        shell: bash

      - name: JDK 17 사용
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@v3

      - name: Gradle Wrapper 실행 권한 추가
        run: chmod +x gradlew

      - name: Gradle 빌드 (테스트 제외, 빌드캐시 사용)
        run: ./gradlew clean build --build-cache -x test

      - name: 도커허브 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_USER_PW }}

      - name: 메타데이터 태그 생성
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be
          tags: |
            type=raw,value=latest
            type=raw,value=sha-${{ github.sha }}

      - name: Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 이미지 빌드 & 푸시 (레이어 캐시)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: EC2 배포 (docker compose)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_IP }}
          port: 22
          username: ubuntu
          key: ${{ secrets.AWS_KEY }}
          envs: GITHUB_SHA
          script: |
              set -e
              export BACKEND_IMAGE=${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be:sha-${{ github.sha }}
            
              echo "이미지 Pull (compose)"
              docker compose pull backend
            
              echo "backend 교체 (리빌드/강제재생성 금지)"
              docker compose up -d backend
            
              echo "상태 확인"
              docker compose ps
              docker logs --tail=100 backend || true      

#      - name: 이미지 빌드
#        run: docker build -t ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be .
#      - name: 도커허브에 이미지 푸시
#        run: docker push ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be
#      - name: AWS EC2에 ssh 접속 후 배포
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.AWS_IP }}
#          port: 22
#          username: ubuntu
#          key: ${{ secrets.AWS_KEY }}
#          script: |
#            docker stop backend || true
#            docker rm backend || true
#
#            # 기존 백엔드 이미지 삭제
#            docker rmi ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be || true
#            docker pull ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be
#
#            # 백엔드 컨테이너만 재시작
#            echo "🔄 백엔드 컨테이너 재시작"
#            docker-compose up -d --force-recreate --build backend
#
#            # 상태 확인 및 로그 출력
#            echo "✅ 상태 확인"
#            docker ps -a
#            docker logs backend
